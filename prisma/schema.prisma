generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  BOTH
}

enum Roles {
  USER
  ADMIN
}

enum ParticipantOrVolunteerStatus {
  CONFIRMED
  WITHDREW
}

enum PaymentType {
  CARD
  PIX
  CASH
  DONATION
}

enum GroupType {
  PARTICIPANT
  VOLUNTEER
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  passwordHash String
  firstAccess  Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  role         Roles     @default(USER)
  events       Event[]   @relation("UserToEvent")

  @@map("users")
}

model Event {
  id                            String               @id @default(uuid())
  name                          String               @unique
  gender                        Gender
  initialDate                   DateTime
  finalDate                     DateTime
  participantPrice              Decimal
  volunteerPrice                Decimal
  isParticipantRegistrationOpen Boolean              @default(true)
  isVolunteerRegistrationOpen   Boolean              @default(true)
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime             @updatedAt
  userId                        String
  user                          User                 @relation("UserToEvent", fields: [userId], references: [id])
  participants                  Participant[]
  volunteers                    Volunteer[]
  participantPayments           ParticipantPayment[]
  volunteerPayments             VolunteerPayment[]
  groups                        Group[]              @relation("GroupToEvent")
  room                          Room[]               @relation("RoomToEvent")
  eventVolunteerRoles           EventVolunteerRole[]

  @@map("events")
}

model VolunteerRole {
  id        String               @id @default(uuid())
  role      String               @unique
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  events    EventVolunteerRole[]

  @@map("volunteers_roles")
}

model EventVolunteerRole {
  id              String   @id @default(uuid())
  eventId         String
  volunteerRoleId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteerRole VolunteerRole @relation(fields: [volunteerRoleId], references: [id], onDelete: Cascade)

  volunteers Volunteer[] @relation("VolunteersOnEventRoles")
  leaders    Volunteer[] @relation("LeadersOnEventRoles")

  @@unique([eventId, volunteerRoleId])
  @@map("event_volunteer_roles")
}

model Volunteer {
  id               String                        @id @default(uuid())
  name             String
  called           String
  email            String
  phone            String
  birthdate        DateTime
  cell             String?
  relative         String
  relativePhone    String
  health           String?
  community        String
  checkIn          ParticipantOrVolunteerStatus?
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  eventId          String
  event            Event                         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  address          VolunteerAddress?
  payments         VolunteerPayment[]
  groupMemberships GroupMember[]                 @relation("GroupMemberToVolunteer")
  roomMember       RoomMember[]                  @relation("RoomMemberToVolunteer")

  eventRoles   EventVolunteerRole[] @relation("VolunteersOnEventRoles")
  leadingRoles EventVolunteerRole[] @relation("LeadersOnEventRoles")

  @@unique([email, eventId])
  @@map("volunteers")
}

model VolunteerAddress {
  id           String    @id @default(uuid())
  street       String
  neighborhood String
  number       String
  city         String
  state        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  volunteerId  String    @unique
  volunteer    Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("volunteers_addresses")
}

model VolunteerPayment {
  id           String       @id @default(uuid())
  paymentValue Decimal
  paymentType  PaymentType?
  eventId      String
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteerId  String
  volunteer    Volunteer    @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("volunteers_payments")
}

model Participant {
  id               String                        @id @default(uuid())
  name             String
  called           String
  email            String
  phone            String
  birthdate        DateTime
  religion         String?
  responsible      String
  responsiblePhone String
  host             String
  hostPhone        String
  health           String?
  checkIn          ParticipantOrVolunteerStatus?
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  eventId          String
  event            Event                         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  address          ParticipantAddress?
  payments         ParticipantPayment[]
  groupMemberships GroupMember[]                 @relation("GroupMemberToParticipant")
  roomMember       RoomMember[]                  @relation("RoomMemberToParticipant")

  @@unique([email, eventId])
  @@map("participants")
}

model ParticipantAddress {
  id            String      @id @default(uuid())
  street        String
  neighborhood  String
  number        String
  city          String
  state         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participantId String      @unique
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("participants_addresses")
}

model ParticipantPayment {
  id            String       @id @default(uuid())
  paymentValue  Decimal
  paymentType   PaymentType?
  eventId       String
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participantId String
  participant   Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("participants_payments")
}

model Group {
  id        String        @id @default(uuid())
  name      String
  eventId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  event     Event         @relation(name: "GroupToEvent", fields: [eventId], references: [id], onDelete: Cascade)
  members   GroupMember[]

  @@unique([eventId, name])
}

model GroupMember {
  id            String       @id @default(uuid())
  type          GroupType
  participantId String?
  volunteerId   String?
  groupId       String
  participant   Participant? @relation("GroupMemberToParticipant", fields: [participantId], references: [id], onDelete: Cascade)
  volunteer     Volunteer?   @relation("GroupMemberToVolunteer", fields: [volunteerId], references: [id], onDelete: Cascade)
  group         Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([participantId], name: "UniqueParticipantGroup")
  @@unique([volunteerId], name: "UniqueVolunteerGroup")
}

model Room {
  id         String       @id @default(uuid())
  roomNumber String
  eventId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  event      Event        @relation(name: "RoomToEvent", fields: [eventId], references: [id], onDelete: Cascade)
  members    RoomMember[]

  @@unique([eventId, roomNumber])
}

model RoomMember {
  id            String       @id @default(uuid())
  type          GroupType
  participantId String?
  volunteerId   String?
  roomId        String
  participant   Participant? @relation("RoomMemberToParticipant", fields: [participantId], references: [id], onDelete: Cascade)
  volunteer     Volunteer?   @relation("RoomMemberToVolunteer", fields: [volunteerId], references: [id], onDelete: Cascade)
  room          Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([participantId], name: "UniqueParticipantRoom")
  @@unique([volunteerId], name: "UniqueVolunteerRoom")
}

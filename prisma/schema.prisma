// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  BOTH
}

enum Roles {
  MASTER
  READ
  WRITER
}

enum ParticipantOrVolunteerStatus {
  CONFIRMED
  WITHDREW
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles
  Event     Event[]

  @@map("users")
}

model Event {
  id               String        @id @default(uuid())
  name             String        @unique
  gender           Gender
  initialDate      DateTime
  finalDate        DateTime
  participantPrice Decimal
  volunteerPrice   Decimal
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  Participant      Participant[]
  Volunteer        Volunteer[]
  EventRoles       EventRoles[]

  @@map("events")
}

model EventRoles {
  id        String      @id @default(uuid())
  role      String      @unique
  eventId   String
  event     Event       @relation(fields: [eventId], references: [id])
  Volunteer Volunteer[]
}

model Participant {
  id            String                        @id @default(uuid())
  name          String
  email         String
  called        String
  birthdate     DateTime
  contact       String
  maritalStatus String
  parent        String
  contactParent String
  relationship  String
  host          String
  contactHost   String
  checkIn       ParticipantOrVolunteerStatus?
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  eventId       String
  event         Event                         @relation(fields: [eventId], references: [id])
  Address       ParticipantAddress?

  @@unique([email, eventId])
  @@map("participants")
}

model ParticipantAddress {
  id            String      @id @default(uuid())
  street        String
  neighborhood  String
  number        String
  city          String
  state         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  participantId String      @unique
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("participants_addresses")
}

model Volunteer {
  id            String                        @id @default(uuid())
  name          String
  email         String
  called        String
  birthdate     DateTime
  contact       String
  maritalStatus String
  parent        String
  contactParent String
  relationship  String
  checkIn       ParticipantOrVolunteerStatus?
  createdAt     DateTime                      @default(now())
  updatedAt     DateTime                      @updatedAt
  eventId       String
  event         Event                         @relation(fields: [eventId], references: [id])
  eventRolesId  String?
  role          EventRoles?                   @relation(fields: [eventRolesId], references: [id])
  Address       VolunteerAddress?

  @@unique([email, eventId])
  @@map("volunteers")
}

model VolunteerAddress {
  id           String    @id @default(uuid())
  street       String
  neighborhood String
  number       String
  city         String
  state        String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  volunteerId  String    @unique
  volunteer    Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@map("volunteers_addresses")
}
